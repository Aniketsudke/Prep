generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id       String    @id @default(uuid())
  username String    @unique
  email    String    @unique
  password String?
  avatar   String?
  provider Provider
  attempts Attempt[]

  status  UserStatus  @default(Online)
  rank    Int         @default(50)
  player1 Challenge[] @relation("U1")
  player2 Challenge[] @relation("U2")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Role      Role?     @default(USER)
}

enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum UserStatus {
  Online
  Playing
  Offline
}

enum Provider {
  google
  credentials
}

model Question {
  id          String       @id @default(uuid())
  slug        String       @unique
  type        QuestionType
  content     String
  difficulty  String
  topic       String
  subject     String
  class       String
  tag         String?
  options     Option[]
  isnumerical Float?
  isTrueFalse Boolean?
  accuracy    Float?       @default(0)

  attempts  Attempt[]
  challenge Challenge[]

  createdAt DateTime @default(now())
}

model Option {
  id         String   @id @default(uuid())
  content    String
  isCorrect  Boolean  @default(false)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum QuestionType {
  MCQ
  NUM
  TF
}

model Attempt {
  userId     String
  questionId String
  isCorrect  Boolean  @default(false)
  solvedAt   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([userId, questionId, solvedAt])
}

model Challenge {
  id          String     @id @default(uuid())
  challengeId String     @unique
  user1Id     String
  user2Id     String?
  status      CStatus    @default(PENDING)
  winner      String?
  user1Score  Int?       @default(0)
  user2Score  Int?       @default(0)
  user1       User       @relation("U1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2       User?      @relation("U2", fields: [user2Id], references: [id], onDelete: Cascade)
  questions   Question[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum CStatus {
  PENDING
  ACTIVE
  COMPLETED
}
